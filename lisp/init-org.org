# this is the title of the document
#+TITLE: My Org Initialization
# this says that org mode will export up to the 4th level heading
# +OPTIONS: H:4
* to load this file do org-babel-load-file and it'll pop up helm and you'll have to say that you want
  to load this file.  All the scripts in this file will be exported and saved into init-org.el.  Then
  that file will be loaded.
* A definition I found online org-begin-template
  I should really check this out at some point http://pragmaticemacs.com/emacs/wrap-text-in-an-org-mode-block/ In my most recent
  post on org-mode, I talked about using blocks to mark text as being latex, or source code and so on. I mentioned using the
  shortcuts like <e then TAB on a new line to create an empty block. Sometimes it is handy to wrap existing text in a block, and
  the following function does that for the text you have selected.

  This has been in my config file for ages and I can’t remember where it came from – I know I didn’t write it! A bit of googleing
  suggests this could be the origin, but if anyone knows different, let me know.

  I bind the function to C-< because it reminds me of the < shortcuts to create the blocks, and I don’t use the
  org-cycle-agenda-files that is usually bound to that key combo.

  #+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; function to wrap blocks of text in org templates                       ;;
  ;; e.g. latex or src etc                                                  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defun org-begin-template ()
  "Make a template at point."
  (interactive)
  (if (org-at-table-p)
      (call-interactively 'org-table-rotate-recalc-marks)
    (let* ((choices '(("s" . "SRC")
                      ("e" . "EXAMPLE")
                      ("q" . "QUOTE")
                      ("v" . "VERSE")
                      ("c" . "CENTER")
                      ("l" . "LaTeX")
                      ("h" . "HTML")
                      ("a" . "ASCII")))
           (key
            (key-description
             (vector
              (read-key
               (concat (propertize "Template type: " 'face 'minibuffer-prompt)
                       (mapconcat (lambda (choice)
                                    (concat (propertize (car choice) 'face 'font-lock-type-face)
                                            ": "
                                            (cdr choice)))
                                  choices
                                  ", ")))))))
      (let ((result (assoc key choices)))
        (when result
          (let ((choice (cdr result)))
            (cond
             ((region-active-p)
              (let ((start (region-beginning))
                    (end (region-end)))
                (goto-char end)
                (insert "#+END_" choice "\n")
                (goto-char start)
                (insert "#+BEGIN_" choice "\n")))
             (t
              (insert "#+BEGIN_" choice "\n")
              (save-excursion (insert "#+END_" choice))))))))))

;;bind to key
;;(define-key org-mode-map (kbd "C-<") 'org-begin-template)

#+END_SRC

* what files org-mode opens
#+BEGIN_SRC emacs-lisp
;; define what files org opens
(add-to-list 'auto-mode-alist '("\\.\\(org\\|txt\\)$" . org-mode))
;;(setq org-default-notes-file (concat org-directory "/notes.org"))
#+END_SRC

* org-crypt, encrypting text under a heading in org
  [[info:org#org-crypt][info:org#org-crypt]]
   Any text below a headline that has a `:crypt:' tag will be
automatically be encrypted when the file is saved.  If you want to use
a different tag just customize the `org-crypt-tag-matcher' setting.

   To use org-crypt it is suggested that you have the following in your
`.emacs':

  #+BEGIN_SRC emacs-lisp
    (require 'org-crypt)
    (org-crypt-use-before-save-magic)
    (setq org-tags-exclude-from-inheritance (quote ("crypt")))
  #+END_SRC

  #+RESULTS:
  | crypt |

  GPG key to use for encryption
  Either the Key ID or set to nil to use symmetric encryption.
  #+BEGIN_SRC emacs-lisp
     (setq org-crypt-key '1CADFCE802C95561)
     (setq org-crypt-key 'u)
  #+END_SRC

  #+RESULTS:
  Auto-saving does not cooperate with org-crypt.el: so you need to turn it off if you plan to use org-crypt.el quite often.
  Otherwise, you'll get an (annoying) message each time you start Org.
  To turn it off only locally, you can insert this:
  # -*- buffer-auto-save-file-name: nil; -*-
  #+BEGIN_SRC emacs-lisp
    (setq auto-save-default nil)
  #+END_SRC

  #+RESULTS:

** this text underneith me should be encrypted :crypt:
   The brown dog jumped over the fence.

* my org capure templates
  This is SOOOO USEFUL!!!! Org capture lets you quickly jot down a thought that you have and place it in a file under
  a heading that you specify.  I have captchas for shopping, for books to read, for things to do.

  #+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
      '(

        ("B" "Things I want to buy" entry (file+headline
        "~/programming/org/gtd/projects/managing-my-monies.org" "things I want to buy")
         "* %?\nEntered on %U\n  %i\n  %a")

        ("c" "Computers Anything")
        ("ca" "Awesome WM" entry (file+headline "~/programming/org/gtd/gtd.org" "awesome WM someday")
         "* TODO %?\nEntered on %U\n  %i\n  %a")
        ("ce" "emacs Todo" entry (file+headline "~/programming/org/gtd/projects/become-an-awesome-hacker.org" "emacs someday")
         "* TODO %?\n  %i\n  %a")
        ("cE" "Emacs Reference" entry (file+headline "~/programming/org/gtd/projects/become-an-awesome-hacker.org" "emacs reference")
         "* %?\nEntered on %U\n  %i\n  %a")
        ("cG" "Gimp Basics Reference" entry (file+headline "~/manuals/gimp.org" "Basic Concepts")
         "* %?\nEntered on %U\n  %i\n  %a")
        ("cH" "The GNU HURD")
        ("cHt" "Hurd" entry (file+headline "~/programming/org/gtd/projects/become-an-awesome-hacker.org"
                                                                       "Hurd")
         "* TODO %?\n  %i\n  %a")
        ("ct" "General Computer TODO"
         entry (file+headline "~/programming/org/gtd/projects/become-an-awesome-hacker.org" "General TODO")
         "* todo %?\n  %i\n  %a")
        ("cw" "Waypoint")
        ("cwi" "ibca Web App")
        ("cwib" "bugs that need fixin'" entry (file+headline "~/programming/org/gtd/projects/working-for-waypoint.org"
                                                                       "bugs that need fixin'")
         "* TODO %?\n  %i\n  %a")
        ("cwic" "core features that must be done" entry (file+headline "~/programming/org/gtd/projects/working-for-waypoint.org"
                                                                       "core features that must be done")
         "* TODO %?\n  %i\n  %a")
        ("cwif" "features the app should have" entry (file+headline "~/programming/org/gtd/projects/working-for-waypoint.org"
                                                                    "features the app should have") "* TODO %?\n  %i\n  %a")
        ("cwir" "IBCA Reference" entry (file+headline "~/programming/org/gtd/projects/working-for-waypoint.org"
                                                      "IBCA Reference") "* %?\nEntered on %U\n  %i\n  %a")
        ("cwiw" "what I have done" entry (file+headline "~/programming/org/gtd/projects/working-for-waypoint.org"
                                                                 "what I have done") "* DONE %?\n  %i\n  %a")
        ("ch" "high star todo"
         entry (file+headline "~/programming/org/gtd/projects/become-an-awesome-hacker.org" "make high star an android app")
         "* todo %?\n  %i\n  %a")
        ("cl" "linux TODO" entry (file+headline "~/programming/org/gtd/projects/become-an-awesome-developer.org" "linux someday")
         "* TODO %?\n  %i\n  %a")
        ("cL" "Linux Reference" entry (file+headline "~/programming/org/gtd/projects/become-an-awesome-developer.org" "linux reference")
         "* %?\nEntered on %U\n  %i\n  %a")
        ("co" "organ TODO" entry (file+headline "~/programming/org/gtd/projects/become-an-awesome-hacker.org" "make organ an android app")
         "* TODO %?\n  %i\n  %a")
        ("cf" "Free the world" entry (file+headline "~/programming/org/gtd/gtd.org" "free the world free content")
         "* %?\nEntered on %U\n  %i\n  %a")

         ("cW" "Web")

        ("cWA" "Accrisoft Reference" entry (file+headline "~/programming/org/gtd/web.org" "Accrisoft reference")
         "* %?\nEntered on %U\n  %i\n  %a")

         ("cWB" "Bootstrap Reference" entry (file+headline "~/programming/org/gtd/web.org" "Bootstrap reference")
         "* %?\nEntered on %U\n  %i\n  %a")

         ("cWS" "Shoppify Reference" entry (file+headline "~/programming/org/gtd/web.org" "Shoppify reference")
         "* %?\nEntered on %U\n  %i\n  %a")

        ("cWW" "Web reference" entry (file+headline "~/programming/org/gtd/web.org" "Web reference")
         "* %?\nEntered on %U\n  %i\n  %a")


        ("C" "Community")
        ("Cc" "community TODO" entry (file+headline "~/programming/org/gtd/gtd.org" "community someday")
         "* TODO %?\n  %i\n  %a")
        ("Cn" "nice things to say" entry (file+headline "~/programming/org/gtd/projects/get-close-to-God.org"
        "nice things to say")
         "* TODO %?\nEntered on %U\n  %i\n  %a")
        ("Cs" "Social Skills Notes" entry (file+headline "~/programming/org/gtd/being-social.org" "Social Skills Notes")
         "* %?\nEntered on %U\n  %i\n  %a")

        ("C" "Calendar TODO" entry (file+headline "~/programming/org/gtd/gtd.org" "calendar")
         "* TODO %?\n  %i\n  %a")

        ("e" "entertainment")
        ("ew" "movies to watch" entry (file+headline "~/programming/org/gtd/projects/whatever-I-want.org" "movies to watch")
         "*  %i\n  %a")
        ("er" "Good Movies Reference" entry (file+headline "~/programming/org/gtd/projects/whatever-I-want.org" "Good Movies")
         "*  %i\n  %a")
        ("g" "getting close to God")
        ("gg" "get a close friend" entry (file+headline "/home/joshua/programming/org/gtd/projects/get-close-to-God.org"
                                                        "get a close friend") "* TODO %?\n  %i\n  %a")
        ("gb" "Boundaries")
        ("gbn" "Boundary Notes" entry (file+headline "~/programming/org/gtd/gtd.org" "Boundary Notes")
         "* %?\nEntered on %U\n  %i\n  %a")
        ("gbl" "Lowering My Expectations of Myself" entry (file+headline "~/programming/org/gtd/gtd.org"
                                                                         "Lowering My Expectations of Myself")
         "* %?\nEntered on %U\n  %i\n  %a")
        ("gbs" "Boundaries To Enforce" entry (file+headline "~/programming/org/gtd/projects/get-close-to-God.org" "Setting Boundaries")
         "* TODO %?\n  %i\n  %a")

        ("p" "payless TODO" entry (file+headline "~/programming/org/gtd/gtd.org" "shopping todo")
         "* TODO %?\n  %i\n  %a")
        ("r" "Reference" entry (file+headline "~/programming/org/gtd/gtd.org" "general reference")
         "* %?\nEntered on %U\n  %i\n  %a")
        ("t" "TODO" entry (file+headline "~/programming/org/gtd/gtd.org" "general todo")
         "* TODO %?\nEntered on %U\n  %i\n  %a")
        ("q" "Quotations" entry (file+headline "~/programming/org/quotes.org" "Quotations")
         "* %?\nEntered on %U\n  %i\n  %a")
        ))
  #+END_SRC

* My org-mode preferences
  #+BEGIN_SRC emacs-lisp

(setq
 ;; make org-mode record the date when you finish a task
 org-log-done t
 ;; when you press S-down, org changes the timestamp under point
 org-edit-timestamp-down-means-later t
 ;; make the agenda start on today not wednesday
 org-agenda-start-on-weekday nil
 ;; don't make the agenda only show saturday and Sunday if today is saturday. Make it show 7 days
 org-agenda-span 7
 ;; using the diary slows down the agenda view
 ;; but it also shows you upcoming calendar events
 org-agenda-include-diary t
 ;; this tells the agenda to take up the whole window and hide all other buffers
 org-agenda-window-setup 'current-window
 ;; this tells org-mode to only quit selecting tags for things when you tell it that you are done with it
 org-fast-tag-selection-single-key nil
 org-html-validation-link nil
 org-export-kill-product-buffer-when-displayed t
 ;; are there more backends that I can use?
 org-export-backends '(ascii beamer html texinfo latex)
 ;;most of these modules let you store links to various stuff in org
 org-modules '(org-bbdb org-gnus org-info invoice man toc)
 ;; where to put the :action: or :work: tag after a heading.  80 colums over
 org-tags-column 80
 ;; don't ask me if I want to run an babel code block.  I know what I'm doing
 org-confirm-babel-evaluate nil)
 
;;a visual hint to let you know what line you are in in org-mode agenda
(add-hook 'org-agenda-finalize-hook (lambda () (hl-line-mode)))
  #+END_SRC

* I generate my org-agenda-files and org-refile-targets
  Org-agenda-files are a list of files where you store your TODOs.  These are your things that need to be done, scheduled items,
  deadlines, recurring items, etc.  Then pressing "C-c a a" lets you build your agenda from all of your agenda files.  It is very
  useful. But it would be a pain to have to manually enter all of your agenda files.  So I've got some code here that I found online
  that lets me generate my agenda files.

  Org-refile-targets are a list of files and possibly headings in any org file that you can at any time jump to move pits of an
  org file to.  So let's say you're in weekly schedule.org, BUT you wish to quickly jump to shopping.org at the heading
  "Groceries",  you can very easily do that.

  #+BEGIN_SRC emacs-lisp

(defun my-org-list-files (dirs ext)
  "Function to create list of org files in multiple subdirectories.
This can be called to generate a list of files for
org-agenda-files or org-refile-targets.

DIRS is a list of directories.

EXT is a list of the extensions of files to be included."
  (let ((dirs (if (listp dirs)
                  dirs
                (list dirs)))
        (ext (if (listp ext)
                 ext
               (list ext)))
        files)
    (mapc
     (lambda (x)
       (mapc
        (lambda (y)
          (setq files
                (append files
                        (file-expand-wildcards
                         (concat (file-name-as-directory x) "*" y)))))
        ext))
     dirs)
    (mapc
     (lambda (x)
       (when (or (string-match "/.#" x)
                 (string-match "#$" x))
         (setq files (delete x files))))
     files)
    files))


(defvar my-org-agenda-directories '("~/programming/org/")
  "List of directories containing org files.")
(defvar my-org-agenda-extensions '(".org")
  "List of extensions of agenda files")

(setq my-org-agenda-directories '("~/programming/org/" "~/programming/org/gtd/"
                                  "~/programming/org/gtd/projects"))
(setq my-org-agenda-extensions '(".org"))

(defun my-org-set-agenda-files ()
  (interactive)
  (setq org-agenda-files (my-org-list-files
                          my-org-agenda-directories
                          my-org-agenda-extensions)
        ;;org-refile-targets (my-org-list-files
          ;;                  my-org-agenda-directories
            ;;                my-org-agenda-extensions
                          ;;  )
        ))

(my-org-set-agenda-files)

  #+END_SRC

  Refile targets include this file and any file contributing to the agenda - up to 5 levels deep  But unfortunately, I cannot
  get org-refile to work.
;;(setq org-refile-targets (quote ((nil :maxlevel . 5) (org-agenda-files :maxlevel . 5))))
;; (setq org-refile-targets '(
;;                            ;;(org-agenda-files :maxlevel . 5)
;;                                ("~/programming/org/gtd/gtd.org")
;;                                ("~/programming/org/gtd/projects/get-close-to-God.org")
;;                           ))
;;(setq org-refile-targets 'org-agenda-files)

;; (setq org-refile-targets '((("~/programming/org/gtd/projects/working-for-waypoint.org") :maxlevel . 5)))

* I can make add words to the TODO and DONE keywords
  #+BEGIN_SRC emacs-lisp
                                        ; Targets start with the file name - allows creating level 1 tasks
(setq org-refile-use-outline-path (quote file))
                                        ; Targets complete in steps so we start with filename, TAB shows the next level of targets etc
(setq org-outline-path-complete-in-steps t)

(setq org-todo-keywords
      '((sequence "STARTED(s) TODO(t)" "CHARGED(c)" "|" "PAID(p)" "DONE(d)")))

;;  (setq org-todo-keywords
;;        (quote ((sequence "TODO(t)" "STARTED(s)" "|" "DONE(d!/!)")
;;                (sequence "WAITING(w@/!)" "SOMEDAY(S)" "|" "CANCELLED(c@/!)"))))

;;(setq org-todo-keyword-faces
  ;;     '(("TODO" . org-warning) ("STARTED" . "yellow")
    ;;     ("CANCELED" . (:foreground "blue" :weight bold))))
  #+END_SRC

* Org Clock Settings
  #+BEGIN_SRC emacs-lisp

;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persistence-insinuate t)
(setq org-clock-persist t)
(setq org-clock-in-resume t)

;; Change task state to STARTED when clocking in
(setq org-clock-in-switch-to-state "STARTED")
;; Save clock data and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)
;; Removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)

;; Show clock sums as hours and minutes, not "n days" etc.
(setq org-time-clocksum-format
      '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))

;; Show the clocked-in task - if any - in the header line
(defun sanityinc/show-org-clock-in-header-line ()
  (setq-default header-line-format '((" " org-mode-line-string " "))))

(defun sanityinc/hide-org-clock-from-header-line ()
  (setq-default header-line-format nil))

(add-hook 'org-clock-in-hook #'sanityinc/show-org-clock-in-header-line)
(add-hook 'org-clock-out-hook #'sanityinc/hide-org-clock-from-header-line)
(add-hook 'org-clock-cancel-hook #'sanityinc/hide-org-clock-from-header-line)

(after-load 'org-clock
  (define-key org-clock-mode-line-map [header-line mouse-2] #'org-clock-goto)
  (define-key org-clock-mode-line-map [header-line mouse-1] #'org-clock-menu))

;;you can start clocking in on an event in the agenda buffer by pressing P
(use-package org-pomodoro
  :ensure t)
(after-load 'org-agenda
  (define-key org-agenda-mode-map (kbd "P") 'org-pomodoro))
  #+END_SRC

* Org-mode-hook
  Org-mode does not play well with yasnippet.  So this function that I got here [[info:org#Conflicts][info:org#Conflicts]] should help
  with making yasnippet play well with org-mode.  It seems to 1st make TAB try to do any org expanding, then it'll
  try to expand a yasnippet.

  #+BEGIN_SRC emacs-lisp
    (defun yas/org-very-safe-expand ()
      (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
  #+END_SRC

  #+RESULTS:
  : yas/org-very-safe-expand

  #+BEGIN_SRC emacs-lisp
    (add-hook 'org-mode-hook #'(lambda ()
                                 (make-variable-buffer-local 'yas/trigger-key)
                                 (setq yas/trigger-key [tab])
                                 (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
                                 (define-key yas/keymap [tab] 'yas/next-field)
                                 (yas-minor-mode)
                                 (yas-reload-all)
                                 ;; (interactive)
                                 ;; make the lines in the buffer wrap around the edges of the screen.
                                 (visual-line-mode)
                                 ;;make ">=" look like >=, etc.
                                 (push '(">=" . ?≥) prettify-symbols-alist)
                                 (push '("<=" . ?≤) prettify-symbols-alist)
                                 (push '("\\geq" . ?≥) prettify-symbols-alist)
                                 (push '("\\leq" . ?≤) prettify-symbols-alist)
                                 (push '("\\neg" . ?¬) prettify-symbols-alist)
                                 (push '("\\rightarrow" . ?→) prettify-symbols-alist)
                                 (push '("\\leftarrow" . ?←) prettify-symbols-alist)
                                 (push '("\\infty" . ?∞) prettify-symbols-alist)
                                 (push '("-->" . ?→) prettify-symbols-alist)
                                 (push '("<--" . ?←) prettify-symbols-alist)
                                 (push '("\\exists" . ?∃) prettify-symbols-alist)
                                 (push '("\\nexists" . ?∄) prettify-symbols-alist)
                                 (push '("\\forall" . ?∀) prettify-symbols-alist)
                                 (push '("\\or" . ?∨) prettify-symbols-alist)
                                 (push '("\\and" . ?∧) prettify-symbols-alist)
                                 (push '(":)" . ?☺) prettify-symbols-alist)
                                 (push '("):" . ?☹) prettify-symbols-alist)
                                 (push '(":D" . ?☺) prettify-symbols-alist)
                                 (push '("^_^" . ?☻) prettify-symbols-alist)))
  #+END_SRC

* a hydra that I found online that lets you easily remember some of the org commands
  this is not working?
  we want to remember the org keyboard navigation commands eh?
  https://github.com/abo-abo/hydra/wiki/Emacs
  #+BEGIN_SRC emacs-lisp

(defhydra hydra-outline (:color pink :hint nil)
  "
^Hide^             ^Show^           ^Move
^^^^^^------------------------------------------------------
_q_: sublevels     _a_: all         _u_: up
_t_: body          _e_: entry       _n_: next visible
_o_: other         _i_: children    _p_: previous visible
_c_: entry         _k_: branches    _f_: forward same level
_l_: leaves        _s_: subtree     _b_: backward same level
_d_: subtree

"
  ;; Hide
  ("q" hide-sublevels)    ; Hide everything but the top-level headings
  ("t" hide-body)         ; Hide everything but headings (all body lines)
  ("o" hide-other)        ; Hide other branches
  ("c" hide-entry)        ; Hide this entry's body
  ("l" hide-leaves)       ; Hide body lines in this entry and sub-entries
  ("d" hide-subtree)      ; Hide everything in this entry and sub-entries
  ;; Show
  ("a" show-all)          ; Show (expand) everything
  ("e" show-entry)        ; Show this heading's body
  ("i" show-children)     ; Show this heading's immediate child sub-headings
  ("k" show-branches)     ; Show all sub-headings under this heading
  ("s" show-subtree)      ; Show (expand) everything in this heading & below
  ;; Move
  ("u" outline-up-heading)                ; Up
  ("n" outline-next-visible-heading)      ; Next
  ("p" outline-previous-visible-heading)  ; Previous
  ("f" outline-forward-same-level)        ; Forward - same level
  ("b" outline-backward-same-level)       ; Backward - same level
  ("z" nil "leave"))

(global-set-key (kbd "C-c #") 'hydra-outline/body) ; by example
  #+END_SRC

* org babel
  #+BEGIN_SRC emacs-lisp

(after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (emacs-lisp . t)
     ;;(latex . t)
     ;;(ledger . t)
     ;;(python . t)
     (awk . t)
     (C . t)
     (js . t)
     (python . t)
     (gnuplot . t)
     (sh . t)
     (sql . t)
     ;;(sqlite . t)
     (gnuplot . t)
     )))
  #+END_SRC

  #+RESULTS:
  : ((emacs-lisp . t) (awk . t) (C . t) (js . t) (python . t) (gnuplot . t) (sh . t) (gnuplot . t))

  Type C-c C-v e  org-babel-execute-maybe to see what this plot produces
  #+BEGIN_SRC gnuplot
    plot 'data' with boxes, sin(x) with lines
  #+END_SRC

  #+RESULTS:

* org invoice
  This lests you manage invoices with org-mode.  It is pretty cool!
  You can create invoices with the following format.  And just call org-invoice-report on the
  begin invoice.  Be careful NOT to put an inactive time stamp anywhere in the tree unless you want that
  parent to show up in the invoice.  ie: If you create a notes heading, don't have an inactive time stamp like
  <2015-09-02 Sat> because when you generate that invoice, Notes will show up in the invoice even though it
  has no time associated with it

 * Working for Waypoint

 #+BEGIN: invoice

  | Task / Date                   |  Time |  Price |
  |-------------------------------+-------+--------|
  | Wednesday, September 02, 2015 |  9:57 | 149.25 |
  | PCN HTML Design               |  9:57 | 149.25 |
  |-------------------------------+-------+--------|
  | Tuesday, August 18, 2015      |  3:19 |  49.75 |
  |                               |  3:19 |  49.75 |
  |-------------------------------+-------+--------|
  | Total:                        | 13:16 | 199.00 |
 #+END:

 ** PCN HTML Design
   :PROPERTIES:
   :RATE: 15
   :END:
   :LOGBOOK:
   CLOCK: [2015-10-16 Fri 14:49]--[2015-10-16 Fri 14:51] =>  0:02
   CLOCK: [2015-10-16 Fri 09:47]--[2015-10-16 Fri 12:34] =>  2:47
   CLOCK: [2015-10-15 Thu 17:32]--[2015-10-15 Thu 18:03] =>  0:31
   CLOCK: [2015-10-15 Thu 17:14]--[2015-10-15 Thu 17:26] =>  0:12
   CLOCK: [2015-10-15 Thu 16:24]--[2015-10-15 Thu 16:37] =>  0:13
   CLOCK: [2015-10-15 Thu 15:42]--[2015-10-15 Thu 15:57] =>  0:15
   CLOCK: [2015-10-15 Thu 14:47]--[2015-10-15 Thu 15:26] =>  0:39
   CLOCK: [2015-10-15 Thu 14:34]--[2015-10-15 Thu 14:42] =>  0:08
   CLOCK: [2015-10-15 Thu 13:26]--[2015-10-15 Thu 14:09] =>  0:43
   CLOCK: [2015-10-15 Thu 13:09]--[2015-10-15 Thu 13:17] =>  0:08
   CLOCK: [2015-10-15 Thu 11:16]--[2015-10-15 Thu 11:59] =>  0:43
   CLOCK: [2015-10-15 Thu 11:10]--[2015-10-15 Thu 11:12] =>  0:02
   CLOCK: [2015-10-14 Wed 14:49]--[2015-10-14 Wed 15:06] =>  0:17
   CLOCK: [2015-10-14 Wed 14:38]--[2015-10-14 Wed 14:49] =>  0:11
   CLOCK: [2015-10-14 Wed 11:39]--[2015-10-14 Wed 11:55] =>  0:16
   CLOCK: [2015-10-14 Wed 09:59]--[2015-10-14 Wed 10:01] =>  0:02
   CLOCK: [2015-10-14 Wed 09:05]--[2015-10-14 Wed 09:59] =>  0:54
   CLOCK: [2015-10-06 Tue 13:22]--[2015-10-06 Tue 13:50] =>  0:28
   CLOCK: [2015-10-06 Tue 11:34]--[2015-10-06 Tue 11:41] =>  0:07
   CLOCK: [2015-10-02 Fri 15:53]--[2015-10-02 Fri 16:20] =>  0:27
   CLOCK: [2015-10-02 Fri 13:21]--[2015-10-02 Fri 13:50] =>  0:29
   CLOCK: [2015-09-17 Thu 17:06]--[2015-09-17 Thu 17:29] =>  0:23
   :END:
   <2015-09-02 Sat>
 ** Client Bar (Jan 01 - Jan 15)
   :PROPERTIES:
   :RATE: 15
   :END:
   :LOGBOOK:
   CLOCK: [2015-10-16 Fri 14:49]--[2015-10-16 Fri 14:51] =>  0:02
   CLOCK: [2015-10-16 Fri 09:47]--[2015-10-16 Fri 12:34] =>  2:47
   CLOCK: [2015-10-15 Thu 17:32]--[2015-10-15 Thu 18:03] =>  0:31
   CLOCK: [2015-10-15 Thu 17:14]--[2015-10-15 Thu 17:26] =>  0:12
   CLOCK: [2015-10-15 Thu 16:24]--[2015-10-15 Thu 16:37] =>  0:13
   CLOCK: [2015-10-15 Thu 15:42]--[2015-10-15 Thu 15:57] =>  0:15
   CLOCK: [2015-10-15 Thu 14:47]--[2015-10-15 Thu 15:26] =>  0:39
   CLOCK: [2015-10-15 Thu 14:34]--[2015-10-15 Thu 14:42] =>  0:08
   CLOCK: [2015-10-15 Thu 13:26]--[2015-10-15 Thu 14:09] =>  0:43
   CLOCK: [2015-10-15 Thu 13:09]--[2015-10-15 Thu 13:17] =>  0:08
   CLOCK: [2015-10-15 Thu 11:16]--[2015-10-15 Thu 11:59] =>  0:43
   CLOCK: [2015-10-15 Thu 11:10]--[2015-10-15 Thu 11:12] =>  0:02
   CLOCK: [2015-10-14 Wed 14:49]--[2015-10-14 Wed 15:06] =>  0:17
   CLOCK: [2015-10-14 Wed 14:38]--[2015-10-14 Wed 14:49] =>  0:11
   CLOCK: [2015-10-14 Wed 11:39]--[2015-10-14 Wed 11:55] =>  0:16
   CLOCK: [2015-10-14 Wed 09:59]--[2015-10-14 Wed 10:01] =>  0:02
   CLOCK: [2015-10-14 Wed 09:05]--[2015-10-14 Wed 09:59] =>  0:54
   CLOCK: [2015-10-06 Tue 13:22]--[2015-10-06 Tue 13:50] =>  0:28
   CLOCK: [2015-10-06 Tue 11:34]--[2015-10-06 Tue 11:41] =>  0:07
   CLOCK: [2015-10-02 Fri 15:53]--[2015-10-02 Fri 16:20] =>  0:27
   CLOCK: [2015-10-02 Fri 13:21]--[2015-10-02 Fri 13:50] =>  0:29
   CLOCK: [2015-09-17 Thu 17:06]--[2015-09-17 Thu 17:29] =>  0:23
   :END:
   <2015-09-02 Sat>
* org-notify lets you know when you have upcoming appointments
  I would like to get this set up so that it shows pop-ups using a lua script
  #+BEGIN_SRC emacs-lisp

    (require 'org-notify)
    (org-notify-start)

    (org-notify-add 'appt
                    '(:time "-1s" :period "20s" :duration 10
                            :actions (-message -ding))
                    '(:time "15m" :period "2m" :duration 100
                            :actions -notify)
                    '(:time "2h" :period "5m" :actions -message)
                    '(:time "3d" :actions -email))
  #+END_SRC

* provide this file
  #+BEGIN_SRC emacs-lisp
    (provide 'init-org)
  #+END_SRC
